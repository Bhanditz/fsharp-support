options {
  parserPackage="JetBrains.ReSharper.Psi.FSharp.Gen";
  parserClassName="FSharpParserGenerated";
  psiInterfacePackageName="JetBrains.ReSharper.Psi.FSharp.Tree";
  psiStubsPackageName="JetBrains.ReSharper.Psi.FSharp.Impl.Tree";
  psiStubsBaseClass="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement";
  tokenClassName="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpToken";
  tokenTypePackageName="JetBrains.ReSharper.Psi.FSharp.Parsing";
  tokenTypeClassName="FSharpTokenType";
  parserTargetSubdir="Parsing/FSharp";
  psiInterfacesTargetSubdir="Psi/FSharp";
  psiStubsTargetSubdir="Psi/FSharp/Impl";
  elementTypePrefix="";
  visitorClassName="TreeNodeVisitor";
  visitorMethodSuffix="";
  disableReflection;
  separateHierarchies;
  acceptModifier="";
  visitorSuperClassName="JetBrains.ReSharper.Psi.FSharp.TreeNodeVisitorBase";
  "treeElementClassFQName"="JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement";
  "leafElementClassFQName"="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpLeafElement";
  "compositeElementClassFQName"="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCompositeElement";
  "psiElementVisitorClassFQName"="JetBrains.ReSharper.Psi.FSharp.Tree.TreeNodeVisitor";
  "unexpectedTokenClassFQName"="Parsing.UnexpectedToken";
  "syntaxErrorClassFQName"="Parsing.SyntaxError";
  "parserGenRuntimePackageName"="Parsing";
  "createTokenElementMethodFQName"="JetBrains.ReSharper.Psi.FSharp.Impl.Factory.createTokenElement";
  "visitMethodPrefix"="Visit";
  "lexerClassName"="JetBrains.ReSharper.Psi.FSharp.Parsing.FSharpLexer";
  "psiClassesPrefix"="";
  "psiElementClassFQName"="JetBrains.ReSharper.Psi.FSharp.Tree.IFSharpTreeNode";
  customImplPackage="JetBrains.ReSharper.Psi.FSharp.Impl.Tree";
  customInterfacePackage="JetBrains.ReSharper.Psi.FSharp.Tree";
  "interfaceNamePrefix"="I";
  "tokenElementClassFQName"="JetBrains.ReSharper.Psi.Tree.ITokenNode";
  "customImplSuffix"="";
  "objectClassFQName"="System.Object";
  publicChildRolePrefix="FS_";
  tokenBitsetThreshold=4;
  elementTypeBaseClass="JetBrains.ReSharper.Psi.FSharp.Tree.FSharpCompositeNodeType";
  parserMessagesClass="JetBrains.ReSharper.Psi.FSharp.Parsing.ParserMessages";
  generateWorkingPsi;
}



// Files

interface fSharpFile
:
  fSharpImplFile |
  fSharpSigFile
;

fSharpImplFile options {
  stubBase="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpFileBase";
}
:
  (moduleOrNamespaceDeclaration<MODULE_OR_NAMESPACE_DECLARATION, Declarations>)* FAKE
;

fSharpSigFile options {
  stubBase="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpFileBase";
}
:
  (moduleOrNamespaceSignature<MODULE_OR_NAMESPACE_SIGNATURE, Signatures>)* FAKE
;



// Modules and namespaces

interface moduleLikeDeclaration
:
  moduleOrNamespaceDeclaration |
  nestedModuleDeclaration
;

interface fSharpDeclaration
:
  moduleOrNamespaceDeclaration |
  moduleMemberDeclaration
;

interface moduleOrNamespaceDeclaration
:
  moduleDeclaration |
  fSharpNamespaceDeclaration
;

fSharpNamespaceDeclaration options {
  stubBase="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpCachedDeclarationBase";
}
:
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  (moduleMemberDeclaration<MODULE_MEMBER, Declarations>)* FAKE
;

moduleDeclaration options {
  stubBase="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpTypeElementDeclarationBase";
}
:
  accessModifiers<FS_ACCESS_MODIFIERS, AccessModifiers>?
  longIdentifier<LONG_IDENTIFIER, LongIdentifier>
  (moduleMemberDeclaration<MODULE_MEMBER, Declarations>)* FAKE
;

moduleOrNamespaceSignature : FAKE;



// Module members


interface moduleMemberDeclaration
:
  nestedModuleDeclaration |
  fSharpTypeDeclaration |
  otherMemberDeclaration
;

nestedModuleDeclaration options {
  stubBase="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpTypeElementDeclarationBase";
}
:
  accessModifiers<FS_ACCESS_MODIFIERS, AccessModifiers>?
  fSharpIdentifier<FS_IDENTIFIER, Identifier>
  (moduleMemberDeclaration<MODULE_MEMBER, Declarations>)* FAKE
;

interface fSharpTypeDeclaration
:
  fSharpExceptionDeclaration //|
//  fSharpSimpleTypeDeclaration |
//  fSharpObjectModelTypeDeclaration
;

fSharpExceptionDeclaration options {
  stubBase="JetBrains.ReSharper.Psi.FSharp.Impl.Tree.FSharpTypeElementDeclarationBase";
}
:
  fSharpIdentifier<FS_IDENTIFIER, Identifier>
;

otherMemberDeclaration: fSharpIdentifier<FS_IDENTIFIER, Identifier>;

// Other

fSharpIdentifier : IDENTIFIER;
longIdentifier: (IDENTIFIER<FS_IDENTIFIER, Identifiers>)* FAKE;
accessModifiers: (KEYWORD<FS_KEYWORD, Modifiers>)* FAKE;