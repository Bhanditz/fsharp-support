//------------------------------------------------------------------------------
// <auto-generated>
//     Generated by IntelliJ parserGen
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0164, 0168, 0219, 0108, 0414, 0114
// ReSharper disable RedundantNameQualifier
using JetBrains.ReSharper.Psi.ExtensionsAPI.Tree;
using JetBrains.ReSharper.Psi.ExtensionsAPI;
using JetBrains.ReSharper.Psi.FSharp.Impl.Tree;
namespace JetBrains.ReSharper.Psi.FSharp.Gen
{
  internal abstract class FSharpParserGenerated : JetBrains.ReSharper.Psi.Parsing.GeneratedParserBase<JetBrains.ReSharper.Psi.FSharp.Parsing.FSharpLexer>
  {
    protected ParsingContext myCurrentContext = ParsingContext.UNDEFINED;
    protected enum ParsingContext : short
    {
      UNDEFINED
    }
    protected class ParsingContextAttribute : System.Attribute
    {
      private ParsingContext myParsingContext;
      public ParsingContextAttribute(ParsingContext context)
      {
        myParsingContext = context;
      }
      public ParsingContext ParsingContext
      {
        get { return myParsingContext; }
      }
    }
    protected bool IsInFollow(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType)
    {
      switch (myCurrentContext)
      {
        case ParsingContext.UNDEFINED:
          return false;
        default:
          throw new System.InvalidOperationException("Unknown context");
      }
    }
    protected virtual TreeElement Match(JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType)
    {
      if (myLexer.TokenType != tokenType)
      {
        var tokenRepr = tokenType.TokenRepresentation;
        if (string.IsNullOrEmpty(tokenRepr))
          throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(JetBrains.ReSharper.Psi.FSharp.Parsing.ParserMessages.GetExpectedMessage(tokenType.ToString()));
        throw new JetBrains.ReSharper.Psi.Parsing.UnexpectedToken(JetBrains.ReSharper.Psi.FSharp.Parsing.ParserMessages.GetExpectedMessage(tokenRepr));
      }
      return CreateToken();
    }
    protected void Skip(CompositeElement parent)
    {
      parent.AppendNewChild(CreateToken());
    }
    public virtual JetBrains.ReSharper.Psi.ExtensionsAPI.Tree.TreeElement ParseFSharpFile()
    {
      JetBrains.ReSharper.Psi.Parsing.TokenNodeType tokenType;
      CompositeElement result = null;
      TreeElement tempParsingResult = null; 
      try
      {
        result = TreeElementFactory.CreateCompositeElement(JetBrains.ReSharper.Psi.FSharp.Impl.Tree.ElementType.F_SHARP_FILE);
        tempParsingResult = Match(JetBrains.ReSharper.Psi.FSharp.Parsing.FSharpTokenType.FAKE);
        result.AppendNewChild(tempParsingResult);
      }
      catch (JetBrains.ReSharper.Psi.Parsing.SyntaxError e)
      {
        if (e.ParsingResult != null && result != null)
        {
          result.AppendNewChild(e.ParsingResult);
        }
        if (result != null)
        {
          e.ParsingResult = result;
        }
        throw;
      }
      return result;
    }
  }
}
